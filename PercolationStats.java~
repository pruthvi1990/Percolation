import edu.princeton.cs.algs4.StdRandom;
import edu.princeton.cs.algs4.StdStats;
import edu.princeton.cs.algs4.WeightedQuickUnionUF;
import java.lang.String;

public class PercolationStats {
    
    double []array_mean;
    int grid_size;
    int test_no;
    Percolation grid_obj;
    
    public PercolationStats(int N, int T)  {
        // perform T independent experiments on an N-by-N grid
        if (N<=0 || T<=0){
            throw new IllegalArgumentException("N & T should be > 0");
        }
        grid_obj  = new Percolation(N);
        array_mean = new double[T];
        grid_size= N;
        test_no=T;         
    }
    
    public double mean(){ 

// sample mean of percolation threshold
        return 0;
    }
    public double stddev(){
        // sample standard deviation of percolation threshold
        return 0;
    }
    public double confidenceLo(){
        // low  endpoint of 95% confidence interval
        return 0;
    }
    public double confidenceHi(){
        // high endpoint of 95% confidence interval
        return 0;
    }

   public static void main(String[] args)  {
       // test client (described below)
       int T, N;
       int first_rand,second_rand;
       N= Integer.valueOf(args[0]);
       T= Integer.valueOf(args[1]);     
       
       PercolationStats stat_obj = new PercolationStats(N,T);
        
       while(T-->0){
            
            while(!stat_obj.grid_obj.percolates()){
                
                first_rand = StdRandom.uniform(N);
                while(first_rand == 0)
                    first_rand = StdRandom.uniform(N);
                
                second_rand = StdRandom.uniform(N);
                while(second_rand == 0)
                    second_rand = StdRandom.uniform(N);
                
                stat_obj.grid_obj.open(first_rand,second_rand);
            }
        } 
        
       
   }
   
}